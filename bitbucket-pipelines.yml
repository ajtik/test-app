image: alpine:3.15

pipelines:
  branches:
    dev:
      - step:
          name: Create environment script for DEV
          clone:
            enabled: false
          script:
            - PIPELINES_ENVIRONMENT=DEV
            - &SAVE_ENVIRONMENT |
              echo "
                PIPELINES_ENVIRONMENT=$PIPELINES_ENVIRONMENT
                export PUBLIC_URL=\${${PIPELINES_ENVIRONMENT}_PUBLIC_URL:-\$PUBLIC_URL}
                export DATABASE_HOST=\${${PIPELINES_ENVIRONMENT}_DATABASE_HOST:-\$DATABASE_HOST}
                export DATABASE_PORT=\${${PIPELINES_ENVIRONMENT}_DATABASE_PORT:-\$DATABASE_PORT}
                export DATABASE_NAME=\${${PIPELINES_ENVIRONMENT}_DATABASE_NAME:-\$DATABASE_NAME}
                export DATABASE_USER=\${${PIPELINES_ENVIRONMENT}_DATABASE_USER:-\$DATABASE_USER}
                export DATABASE_PASSWORD=\${${PIPELINES_ENVIRONMENT}_DATABASE_PASSWORD:-\$DATABASE_PASSWORD}
                export TRACY_EMAIL=\${${PIPELINES_ENVIRONMENT}_TRACY_EMAIL:-\$TRACY_EMAIL}
                DEPLOY_HOST=\${${PIPELINES_ENVIRONMENT}_DEPLOY_HOST:-\$DEPLOY_HOST}
                DEPLOY_PORT=\${${PIPELINES_ENVIRONMENT}_DEPLOY_PORT:-\$DEPLOY_PORT}
                DEPLOY_USER=\${${PIPELINES_ENVIRONMENT}_DEPLOY_USER:-\$DEPLOY_USER}
                DEPLOY_PATH=\${${PIPELINES_ENVIRONMENT}_DEPLOY_PATH:-\$DEPLOY_PATH}
                DEPLOY_OWNER=\${${PIPELINES_ENVIRONMENT}_DEPLOY_OWNER:-\$DEPLOY_OWNER}
                PHP_COMMAND=\${${PIPELINES_ENVIRONMENT}_PHP_COMMAND:-\$PHP_COMMAND}
              " | sed -e 's/^\s*//;/^$/d' > pipelines-environment.sh
          artifacts: &ENVIRONMENT_SCRIPT
            - pipelines-environment.sh

      - step: &CONFIG_FILES
          name: Create config files
          script:
            - &LOAD_ENVIRONMENT source pipelines-environment.sh
            - apk update && apk add --no-cache gettext

            - |
              ENV_VARIABLES=$(echo '
                $PUBLIC_URL,
                $DATABASE_HOST,
                $DATABASE_PORT,
                $DATABASE_NAME,
                $DATABASE_USER,
                $DATABASE_PASSWORD,
                $EMAIL_TO,
                $TRACY_EMAIL,
              ' | sed ':a;{N;s/\n\s*//;ba;}')

            - envsubst $ENV_VARIABLES < .env.local.pipelines > .env.local
            - envsubst $ENV_VARIABLES < config/local.neon.pipelines > config/local.neon
            - envsubst $ENV_VARIABLES < config/local.neon.pipelines-build > config/local.neon.build
          artifacts:
            - .env.local
            - config/local.neon
            - config/local.neon.build

      - step: &FRONTEND_BUILD
          name: Install and build frontend
          image: node:16.14.0-alpine3.15
          caches:
            - node
          script:
            - *LOAD_ENVIRONMENT
            - apk update && apk add --no-cache git openssh-client

            - SSH_PRIVATE_KEY_FILE=docker/webpack/id_rsa
            - &LOAD_SSH_KEY cp "$SSH_PRIVATE_KEY_FILE" ~/.ssh/id_rsa && chmod 0600 ~/.ssh/id_rsa && eval "$(ssh-agent)" && ssh-add ~/.ssh/id_rsa

            - yarn install
            - yarn stylelint
            - yarn eslint
            - yarn test --watchAll=false --passWithNoTests
            - yarn build
          artifacts:
            - www/build/**

      - step: &BACKEND_BUILD
          name: Install and test backend
          image: php:8.0.15-fpm-alpine3.15
          caches:
            - composer
            - php-conf
            - php-extensions
            - vendor
          script:
            - *LOAD_ENVIRONMENT
            - |
                apk update &&
                apk add --no-cache freetype git icu-libs libjpeg-turbo libpng libwebp libxpm libzip openssh-client &&
                if php -r "exit(extension_loaded('gd') && extension_loaded('intl') && extension_loaded('pdo_mysql') && extension_loaded('soap') && extension_loaded('zip') ? 1 : 0);"; then
                  apk add --no-cache cmake freetype-dev gnutls-dev icu-dev libjpeg-turbo-dev libpng-dev libressl-dev libwebp-dev \
                    libxml2-dev libxpm-dev libzip-dev zlib-dev &&
                  docker-php-ext-configure gd --enable-gd --with-webp --with-jpeg --with-xpm --with-freetype &&
                  docker-php-ext-configure zip --with-zip &&
                  docker-php-ext-install -j$(nproc) gd intl pdo_mysql soap zip &&
                  apk del --purge cmake freetype-dev gnutls-dev icu-dev libjpeg-turbo-dev libpng-dev libressl-dev libwebp-dev \
                    libxml2-dev libxpm-dev libzip-dev zlib-dev
                fi
            - echo 'memory_limit = -1' > /usr/local/etc/php/conf.d/zz-custom.ini
            - curl -sS https://getcomposer.org/installer | php -- --2.2

            - SSH_PRIVATE_KEY_FILE=docker/php/id_rsa
            - *LOAD_SSH_KEY

            - cp config/local.neon.build config/local.neon

            - php composer.phar install
            - php composer.phar check-cs
            - php composer.phar phpstan
            - php composer.phar test -- -c tests/php-docker.ini

            - &CONNECT_DB ssh -fNMS ssh-control-socket -p "$DEPLOY_PORT" -L "${DATABASE_PORT}:${DATABASE_HOST}:${DATABASE_PORT}" "${DEPLOY_USER}@${DEPLOY_HOST}"
            - if stat -t migrations/*.php > /dev/null 2>&1; then bin/console migrations:migrate --no-interaction --write-sql doctrine-migrations.sql; else touch doctrine-migrations.sql; fi
            - &DISCONNECT_DB ssh -S ssh-control-socket -O exit "$DEPLOY_HOST"

            - php composer.phar install --no-dev
          artifacts:
            - composer.phar
            - doctrine-migrations.sql
            - vendor/**

      - step:
          name: Deploy to DEV
          deployment: Dev
          script: &DEPLOY_COMMANDS
            - *LOAD_ENVIRONMENT
            - &INSTALL_SSH_MYSQL apk update && apk add --no-cache mariadb-client openssh-client rsync

            - &DEPLOY_DIRS |
              ssh -p "$DEPLOY_PORT" "${DEPLOY_USER}@${DEPLOY_HOST}" "
                for DIR in '$DEPLOY_PATH' '${DEPLOY_PATH}/temp/' '${DEPLOY_PATH}/temp/composer-check-platform-reqs/'; do
                  if [ ! -e \"\$DIR\" ]; then
                    sudo mkdir \"\$DIR\" && sudo chown '$DEPLOY_OWNER' \"\$DIR\" || exit \$?;
                  fi
                done
              "
            - &DEPLOY_COMPOSER_RSYNC |
              rsync -rp --delete-after -v -go --chown=$DEPLOY_OWNER --chmod=g-w,o-w --rsync-path="sudo rsync" -e "ssh -p $DEPLOY_PORT" composer.json composer.lock composer.phar ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PATH}/temp/composer-check-platform-reqs/
            - &DEPLOY_COMPOSER_CHECK |
              ssh -p "$DEPLOY_PORT" "${DEPLOY_USER}@${DEPLOY_HOST}" "
                cd '${DEPLOY_PATH}/temp/composer-check-platform-reqs/' && '$PHP_COMMAND' composer.phar check-platform-reqs --no-dev
                STATUS=\$?
                cd '$DEPLOY_PATH' && sudo rm -r temp/composer-check-platform-reqs
                exit \$STATUS
              "

            - &DEPLOY_CHMOD chmod -R g-w,o-w . && chmod g+w log temp
            - &DEPLOY_RSYNC |
              rsync -rpR --delete-after -v -go --chown=$DEPLOY_OWNER --checksum --rsync-path="sudo rsync" -e "ssh -p $DEPLOY_PORT" app composer.json composer.lock config .htaccess log/.gitignore readme.md temp vendor www ${DEPLOY_USER}@${DEPLOY_HOST}:${DEPLOY_PATH}

            - *CONNECT_DB
            - &MIGRATE_DB mysql -v -h 127.0.0.1 -P "$DATABASE_PORT" -u "$DATABASE_USER" -p"$DATABASE_PASSWORD" "$DATABASE_NAME" < doctrine-migrations.sql
            - *DISCONNECT_DB


    preview:
      - step:
          name: Create environment script for PREVIEW
          clone:
            enabled: false
          script:
            - PIPELINES_ENVIRONMENT=PREVIEW
            - *SAVE_ENVIRONMENT
          artifacts: *ENVIRONMENT_SCRIPT
      - step: *CONFIG_FILES
      - step: *FRONTEND_BUILD
      - step: *BACKEND_BUILD
      - step:
          name: Deploy to PREVIEW
          deployment: Preview
          script: *DEPLOY_COMMANDS


    main:
      - step:
          name: Create environment script for PRODUCTION
          clone:
            enabled: false
          script:
            - PIPELINES_ENVIRONMENT=PRODUCTION
            - *SAVE_ENVIRONMENT
          artifacts: *ENVIRONMENT_SCRIPT
      - step: *CONFIG_FILES
      - step: *FRONTEND_BUILD
      - step: *BACKEND_BUILD
      - step:
          name: Deploy to PRODUCTION
          deployment: Production
          trigger: manual
          script: *DEPLOY_COMMANDS


  pull-requests:
    '**':
      - step:
          name: Create environment script
          clone:
            enabled: false
          script:
            - |
              if [ "$BITBUCKET_PR_DESTINATION_BRANCH" = 'main' ] && [ "$BITBUCKET_BRANCH" = 'preview' ]; then
                exit 1
              fi
            - |
              if [ "$BITBUCKET_PR_DESTINATION_BRANCH" = 'dev' ]; then
                PIPELINES_ENVIRONMENT=ALPHA
                SOURCE_PIPELINES_ENVIRONMENT=DEV
              elif [ "$BITBUCKET_PR_DESTINATION_BRANCH" = 'preview' ]; then
                PIPELINES_ENVIRONMENT=BETA
                SOURCE_PIPELINES_ENVIRONMENT=PREVIEW
              elif [ "$BITBUCKET_PR_DESTINATION_BRANCH" = 'main' ]; then
                PIPELINES_ENVIRONMENT=PREVIEW
              else
                PIPELINES_ENVIRONMENT=DEV
              fi
            - *SAVE_ENVIRONMENT
            - &PR_SOURCE_GUARD |
              if [ -z "$SOURCE_PIPELINES_ENVIRONMENT" ]; then
                exit 0
              fi
            - |
              echo "
                SOURCE_PIPELINES_ENVIRONMENT=$SOURCE_PIPELINES_ENVIRONMENT
                SOURCE_DATABASE_HOST=\${${SOURCE_PIPELINES_ENVIRONMENT}_DATABASE_HOST:-\$DATABASE_HOST}
                SOURCE_DATABASE_PORT=\${${SOURCE_PIPELINES_ENVIRONMENT}_DATABASE_PORT:-\$DATABASE_PORT}
                SOURCE_DATABASE_NAME=\${${SOURCE_PIPELINES_ENVIRONMENT}_DATABASE_NAME:-\$DATABASE_NAME}
                SOURCE_DATABASE_USER=\${${SOURCE_PIPELINES_ENVIRONMENT}_DATABASE_USER:-\$DATABASE_USER}
                SOURCE_DATABASE_PASSWORD=\${${SOURCE_PIPELINES_ENVIRONMENT}_DATABASE_PASSWORD:-\$DATABASE_PASSWORD}
                SOURCE_DEPLOY_HOST=\${${SOURCE_PIPELINES_ENVIRONMENT}_DEPLOY_HOST:-\$DEPLOY_HOST}
                SOURCE_DEPLOY_PORT=\${${SOURCE_PIPELINES_ENVIRONMENT}_DEPLOY_PORT:-\$DEPLOY_PORT}
                SOURCE_DEPLOY_USER=\${${SOURCE_PIPELINES_ENVIRONMENT}_DEPLOY_USER:-\$DEPLOY_USER}
                DATABASE_ADMIN_HOST=\${${PIPELINES_ENVIRONMENT}_DATABASE_ADMIN_HOST:-\$DATABASE_ADMIN_HOST}
                DATABASE_ADMIN_PORT=\${${PIPELINES_ENVIRONMENT}_DATABASE_ADMIN_PORT:-\$DATABASE_ADMIN_PORT}
                DATABASE_ADMIN_USER=\${${PIPELINES_ENVIRONMENT}_DATABASE_ADMIN_USER:-\$DATABASE_ADMIN_USER}
                DATABASE_ADMIN_PASSWORD=\${${PIPELINES_ENVIRONMENT}_DATABASE_ADMIN_PASSWORD:-\$DATABASE_ADMIN_PASSWORD}
              " | sed -e 's/^\s*//;/^$/d' | cat - pipelines-environment.sh > tmp && mv tmp pipelines-environment.sh
              echo "
                PUBLIC_URL=\$(printf \"\$PUBLIC_URL\" \"\$BITBUCKET_PR_ID\")
                DATABASE_NAME=\$(printf \"\$DATABASE_NAME\" \"\$BITBUCKET_PR_ID\")
                DEPLOY_PATH=\$(printf \"\$DEPLOY_PATH\" \"\$BITBUCKET_PR_ID\")
              " | sed -e 's/^\s*//;/^$/d' >> pipelines-environment.sh
          artifacts: *ENVIRONMENT_SCRIPT

      - step: *CONFIG_FILES
      - step: *FRONTEND_BUILD

      - step:
          name: Set up ALPHA/BETA
          clone:
            enabled: false
          script:
            - *LOAD_ENVIRONMENT
            - *PR_SOURCE_GUARD
            - *INSTALL_SSH_MYSQL

            - ssh -p "$DEPLOY_PORT" "${DEPLOY_USER}@${DEPLOY_HOST}" "DIR='$( dirname $DEPLOY_PATH )'; if [ ! -e \"\$DIR\" ]; then sudo mkdir \"\$DIR\" && sudo chown '$DEPLOY_OWNER' \"\$DIR\"; fi"

            - ssh -fNMS ssh-control-socket -p "$SOURCE_DEPLOY_PORT" -L "${SOURCE_DATABASE_PORT}:${SOURCE_DATABASE_HOST}:${SOURCE_DATABASE_PORT}" "${SOURCE_DEPLOY_USER}@${SOURCE_DEPLOY_HOST}"
            - mysqldump -h 127.0.0.1 -P "$SOURCE_DATABASE_PORT" -u "$SOURCE_DATABASE_USER" -p"$SOURCE_DATABASE_PASSWORD" "$SOURCE_DATABASE_NAME" > database-dump.sql
            - ssh -S ssh-control-socket -O exit "$SOURCE_DEPLOY_HOST"

            - &DROP_DB echo "DROP DATABASE IF EXISTS \`$DATABASE_NAME\`; DELETE FROM \`mysql\`.\`db\` WHERE \`db\` = '$DATABASE_NAME'; FLUSH PRIVILEGES;" | ssh -p "$DEPLOY_PORT" "${DEPLOY_USER}@${DEPLOY_HOST}" "sudo mysql --protocol=SOCKET -v -h '$DATABASE_ADMIN_HOST' -P '$DATABASE_ADMIN_PORT' -u '$DATABASE_ADMIN_USER' -p'$DATABASE_ADMIN_PASSWORD'"
            - echo "CREATE DATABASE IF NOT EXISTS \`$DATABASE_NAME\` CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci; GRANT ALL ON \`$DATABASE_NAME\`.* TO \`$DATABASE_USER\`@localhost;" | ssh -p "$DEPLOY_PORT" "${DEPLOY_USER}@${DEPLOY_HOST}" "sudo mysql --protocol=SOCKET -v -h '$DATABASE_ADMIN_HOST' -P '$DATABASE_ADMIN_PORT' -u '$DATABASE_ADMIN_USER' -p'$DATABASE_ADMIN_PASSWORD'"
            - *CONNECT_DB
            - mysql -h 127.0.0.1 -P "$DATABASE_PORT" -u "$DATABASE_USER" -p"$DATABASE_PASSWORD" "$DATABASE_NAME" < database-dump.sql
            - *DISCONNECT_DB

      - step: *BACKEND_BUILD

      - step:
          name: Deploy
          deployment: Pull Request
          script:
            - *LOAD_ENVIRONMENT
            - |
              if [ -z "$SOURCE_PIPELINES_ENVIRONMENT" ] && [ "$BITBUCKET_PR_DESTINATION_BRANCH" != 'main' ]; then
                exit 0
              fi
            - *INSTALL_SSH_MYSQL

            - *DEPLOY_DIRS
            - *DEPLOY_COMPOSER_RSYNC
            - *DEPLOY_COMPOSER_CHECK

            - *DEPLOY_CHMOD
            - *DEPLOY_RSYNC

            - *CONNECT_DB
            - *MIGRATE_DB
            - *DISCONNECT_DB

      - step:
          name: Clean up ALPHA/BETA
          trigger: manual
          clone:
            enabled: false
          script:
            - *LOAD_ENVIRONMENT
            - *PR_SOURCE_GUARD
            - *INSTALL_SSH_MYSQL

            - *DROP_DB
            - ssh -p "$DEPLOY_PORT" "${DEPLOY_USER}@${DEPLOY_HOST}" "if [ -e '$DEPLOY_PATH' ]; then sudo rm -r '$DEPLOY_PATH'; fi"


definitions:
  caches:
    php-conf: /usr/local/etc/php/conf.d
    php-extensions: /usr/local/lib/php/extensions
    vendor: vendor
